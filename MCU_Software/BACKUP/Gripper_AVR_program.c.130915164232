//----------【硬件配置说明】↓------------------------------------------------------------
//舵机：波特率19200，电源DC12V，ID：0和1
//电源线和控制线的电平互不干扰
//电源2根，RS485两根
//UART0用于MCU和PC的通信，波特率19200
//UART1用于MCU和舵机的通信，波特率19200

//----------【头文件】↓------------------------------------------------------------
#include <iom128v.h>
#include <macros.h>
#include <string.h>

//----------【宏定义】↓------------------------------------------------------------
#define  uchar unsigned char
#define  uint  unsigned int

#define  mclk   8000000 //时钟频率8.0MHz

//----------【常量】↓------------------------------------------------------------
const uchar Ratio1=1;
const uchar Ratio2=2;
const uchar Force=3;


const uchar no0release[]={0xff,0xff,0x00,0x05,0x03,0x20,0xff,0x07,0xd1};//0号舵机松开（顺时针，力矩100%）
const uchar no0stop[]={0xff,0xff,0x00,0x05,0x03,0x20,0x00,0x00,0xd7}; //0号舵机停止（逆时针，力矩0%）
const uchar no1release[]={0xff,0xff,0x01,0x05,0x03,0x20,0xff,0x07,0xd0};//1号舵机松开（顺时针，力矩100%）
const uchar no1stop[]={0xff,0xff,0x01,0x05,0x03,0x20,0x00,0x00,0xd6}; //1号舵机停止（逆时针，力矩0%）

//----------【全局变量定义】↓------------------------------------------------------------

uchar gripper_mood=0;//夹持器模式：0-未指定；1-一般工作模式；2-参数配置模式

uchar cage0_state,cage1_state;//表明夹持器两端限位情况

/*以下变量用于建立上位机指令处理机制*/
uchar uart0_rdata_byte;//UART0每次接收到的单字节信息
uchar uart0_r_instr_chk=0;//uart0接收到的字符串开头中x字符的个数
uchar uart0_instr[5];//存储PC发给MCU的指令，不包含xx，仅包含四位指令代码，最后一位为NULL
uchar uart0_instr_flag=0;//UART0中断接收到开头和长度符合要求的instr时置为1


//--------------【软件延时函数】--------------------------------------------------------------------

//延时函数，参数为要延时的毫秒数
void delay(uint ms)
{
    uint i,j;
	for(i=0;i<ms;i++)
	{
	 for(j=0;j<1141;j++);
    }
}


//----------【UART0的相关函数】↓---------------------------------------------------------------

/*UART0的串口初始化函数*/
void uart0_init(uint baud)
{
   UCSR0B=0x00; 
   UCSR0A=0x00; 		   //控制寄存器清零
   UCSR0C=(0<<UPM00)|(3<<UCSZ00); //选择UCSRC，异步模式，禁止校验，1位停止位，8位数据位                       
   
   baud=mclk/16/baud-1;    //波特率最大为65K
   UBRR0L=baud; 					     	  
   UBRR0H=baud>>8; 		   //设置波特率

   UCSR0B|=(1<<TXEN0);   //UART0发送使能
   SREG=BIT(7);	           //全局中断开放
   DDRE|=BIT(1);	           //配置TX为输出（很重要），似乎对于MEGA1280来说没用
}

/*UART0的串口发送函数，每次发送一个字节（Byte）*/
void uart0_sendB(uchar data)
{
   while(!(UCSR0A&(BIT(UDRE0))));//判断准备就绪否
   UDR0=data;
   while(!(UCSR0A&(BIT(TXC0))));//判断完成发送否
   UCSR0A|=BIT(TXC0);//TXC0标志位手动清零，通过将TXC0置1实现
}

#pragma interrupt_handler uart0_rx:19

/*UART0的串口接收函数，每次接收一个字节（Byte）*/
void uart0_rx(void)
{
 	uchar uart0_r_byte;//UART0每次中断接收到的字符（1byte）
	UCSR0B&=~BIT(RXCIE0);//关闭RXCIE1，其余位保持不变
	uart0_r_byte=UDR0;
	if(uart0_instr_make(uart0_r_byte)==0)//通过接受字符串，产生符合要求的instr
	    {UCSR0B|=BIT(RXCIE0);}//使能RXCIE1，其余位保持不变
}

//UART0的指令识别函数，从接收到的字符中提取出以xx开头的指令字符串
uchar uart0_instr_make(uchar r_byte)
{
    uchar instr_num;//instr中已有的字符数
	uchar fun_ret;//存储本函数返回值 
    switch(uart0_r_instr_chk)//根据已有x的个数进行操作
	{
	    case 0:
			 {
			 if(r_byte=='x')
			     {				 
				 uart0_r_instr_chk=1;
				 }
			 fun_ret=0;
			 break;
			 }
		case 1:
			 {
			 if(r_byte=='x')
			     {uart0_r_instr_chk=2;}
			 else
			 	 {uart0_r_instr_chk=0;}
			 fun_ret=0;
			 break;
			 }
		case 2:
			 {
			 instr_num=strlen(uart0_instr);
			 if(instr_num==3)
			 {
			     uart0_instr[instr_num]=r_byte;
				 uart0_instr_flag=1;//instr已经满足开头xx和长度要求，flag置1，进行命令处理
			     fun_ret=1;				 
			 }
			 else
			 {
			     uart0_instr[instr_num]=r_byte;
				 fun_ret=0;
			 }
			 break;
			 }
		default:break;
	}
	return fun_ret;
}

/*UART0字符串发送函数*/
void uart0_send_string(uchar *str_send)//形参：待发送字符串
{
 	 uchar str_send_num=strlen(str_send);//待发送字符串包含的字符数，
	 	   								//数组str_send最后一位值为NULL
	 uchar i=0;
	 while(i<str_send_num)
	 {
	   uart0_sendB(*(str_send+i));
	   i+=1;
	 }
}

void uart0_send_string_with_num(uchar *str_send,uchar char_num)//形参：待发送字符串，字符串字符数
{
	 uchar i=0;
	 while(i<char_num)
	 {
	   uart0_sendB(*(str_send+i));
	   i+=1;
	 }
}

//------------【UART1的相关函数】↓-------------------------------------------------------------

/*UART1的串口初始化函数*/
void uart1_init(uint baud)
{
    UCSR1B=0x00; 
    UCSR1A=0x00; 		   //控制寄存器清零
    UCSR1C=(0<<UPM10)|(3<<UCSZ10); //选择UCSRC，异步模式，禁止校验，1位停止位，8位数据位                       
   
    baud=mclk/16/baud-1;    //波特率最大为65K
    UBRR1L=baud; 					     	  
    UBRR1H=baud>>8; 		   //设置波特率
   
    UCSR1B|=(1<<TXEN1)|(1<<RXEN1)|(1<<RXCIE1);   //接收、发送使能，接收中断使能
    SREG=BIT(7);	           //全局中断开放
    DDRD|=BIT(3);	           //配置TX为输出（很重要），似乎对于MEGA1280来说没用
   
   	//RS485芯片设置为发送，DE=PD5=1
	//注意！该芯片为半双工通信，不可同时收和发，配置引脚时应注意这一点
    DDRD|=BIT(5);
    PORTD|=BIT(5);

	DDRD|=BIT(4);
    PORTD|=BIT(4);
}


/*UART1的串口发送函数，每次发送一个字节（Byte）*/
void uart1_sendB(uchar data)
{
   while(!(UCSR1A&(BIT(UDRE1))));//判断准备就绪否
   UDR1=data;
   while(!(UCSR1A&(BIT(TXC1))));//判断完成发送否
   UCSR1A|=BIT(TXC1);//TXC1标志位手动清零，通过将TXC1置1实现
}

/*UART1字符串发送函数*/
void uart1_send_string(uchar *str_send,uchar str_num)//形参：待发送字符串
{
	 uchar i=0;
	 while(i<str_num)
	 {
	   uart1_sendB(*(str_send+i));
	   i+=1;
	   //delay(10);
	 }
}

//#pragma interrupt_handler uart1_rx:31

/*
void uart1_rx(void)
{	
    UCSR1B&=~BIT(RXCIE1);
	//rdata=UDR1;
	//flag=1;
	UCSR1B|=BIT(RXCIE1);
}
*/


//------------------【字符串处理函数】↓-------------------------------------------------------

//数组元素拷贝函数
void array_copy(uchar *array1,uchar start_index,uchar *array2,uchar copy_num)
//将array1中自第start_index位起的copy_num个元素拷贝到array2的第0到copy_num-1位
//array1的元素数目不应小于start_index+copy_num+1个，array2的元素数目不应小于copy_num个
{
    uchar i;
	for(i=0;i<copy_num;i++)
	{
	    array2[i]=array1[start_index+i];
	}
}

//字符数组或字符串比较函数：若返回0，则表示相等，否则不等
//*str0或*str1可以使数组(例如array_eg[])，也可以是字符串常量(例如"abcd")
int array_cmp(char * str0, char * str1)
{
    int i;
    for(i=0;str0[i]!=0 && str1[i]!=0 && str0[i]==str1[i];i++);
    return str0[i]-str1[i];
}

uchar* Type(uchar* Instruction)
{
    static uchar type_name[3];//static关键词很重要！否则子程序调用完成后，数组内容消失
	type_name[0]=Instruction[0];
	type_name[1]=Instruction[1];
	type_name[2]=0;
	return type_name;
}

//----------------【应变片数据读取函数】↓--------------------------------

//应变片读取配置
void force_data_init(void)
{
	/*A0-DT ADDO：单片机从DT读取数据;A1-SCK ADSK：单片机输出高低电平到SCK*/
	//PA0配置成高阻态输入
	DDRA&=(~BIT(0));//DDRA0=0
	PORTA&=(~BIT(0));//PORTA0=0

	//PA1配置成输出
	DDRA|=BIT(1);//DDRA1=1
}

//unsigned long型数字转成字符串，用于将应变片采集回的数据上传
uchar* ulong_to_uchar_array(unsigned long data_num)
{
 	//long型在内存中的存储 0x12345678 →低地址78+56+34+12高地址
	uchar* pNum;
	uchar force_data[5];
	pNum=(uchar *)&data_num;
	force_data[3]=*pNum;
	force_data[2]=*(++pNum);
	force_data[1]=*(++pNum);
	force_data[0]=*(++pNum);
	force_data[4]=0;
	return force_data;
}

//应变采集模块数据读取程序，参照卖方示例编写
unsigned long ReadCount(void)
{
    unsigned long Count;
    unsigned char i;
	uchar* ptr_count;
	PORTA&=(~BIT(1));//ADSK=PORTA1=0
    Count=0;
    while(PINA&BIT(0));//读取PINA0=ADDO
    for(i=0;i<24;i++)
    {
        PORTA|=BIT(1);//ADSK=PORTA1=1
        Count=Count<<1;
        PORTA&=(~BIT(1));//ADSK=PORTA1=0
        if(PINA&BIT(0)) Count++;
    }
    PORTA|=BIT(1);//ADSK=PORTA1=1
    Count=Count^0x800000;
    PORTA&=(~BIT(1));//ADSK=PORTA1=0
    return(Count);
}

//----------------【定时计数器1的相关函数】↓---------------------------------------------

//定时计数器初始化函数
void timer1_init(void)
{
    TCCR1B=0X04;//256内部分频
	TCNT1=0xC2F6;//定时周期500ms，计算方法见开发文档
	TIFR=0x04;//定时计数器1溢出标志位清除，置1清除，上电默认为0
}

//声明中断函数
#pragma interrupt_handler timer1_interrupt_handler:15

//定时计数器1中断处理函数
void timer1_interrupt_handler(void)
{
    unsigned long force_ulong;
	force_ulong=ReadCount();
	uart0_send_string_with_num(ulong_to_uchar_array(force_ulong),4);
	TCNT1=0xC2F6;//需要重新设定周期500ms
}

//----------------【舵机控制相关函数】↓---------------------------------------------

//指令校验码生成函数，公式由舵机使用说明书指定
uchar ratio_command_check(uchar ID,uchar PARA2,uchar PARA3)
{
    uchar check_sum;
	check_sum=0x05+0x03+0x20+ID+PARA2+PARA3;
	return ~check_sum;
}

//指令数据存储函数，舵机ENDLESS TURN模式下PARA2和PARA3存放到EEPROM中，手指移动第一阶段
void command_data_save_ratio_1(uchar PARA2,uchar PARA3)
{
    while(EECR & BIT(EEWE));//判断EEWE是否为0
	EEAR=0x0000;//写高地址
	EEDR=PARA2;//写数据
	EECR|=BIT(EEMWE);//EEMWE置1
	EECR&=(~BIT(EEWE));//EEWE置0
	EECR|=BIT(EEWE);//EEWE置1
	
	while(EECR & BIT(EEWE));//判断EEWE是否为0
	EEAR=0x0001;//写高地址
	EEDR=PARA3;//写数据
	EECR|=BIT(EEMWE);//EEMWE置1
	EECR&=(~BIT(EEWE));//EEWE置0
	EECR|=BIT(EEWE);//EEWE置1
}

//舵机控制指令数据存储函数，舵机ENDLESS TURN模式下PARA2和PARA3存放到EEPROM中，手指移动第二阶段
void command_data_save_ratio_2(uchar PARA2,uchar PARA3)
{
    while(EECR & BIT(EEWE));//判断EEWE是否为0
	EEAR=0x0002;//写高地址
	EEDR=PARA2;//写数据
	EECR|=BIT(EEMWE);//EEMWE置1
	EECR&=(~BIT(EEWE));//EEWE置0
	EECR|=BIT(EEWE);//EEWE置1
	
	while(EECR & BIT(EEWE));//判断EEWE是否为0
	EEAR=0x0003;//写高地址
	EEDR=PARA3;//写数据
	EECR|=BIT(EEMWE);//EEMWE置1
	EECR&=(~BIT(EEWE));//EEWE置0
	EECR|=BIT(EEWE);//EEWE置1
}

//舵机控制指令数据读取函数，从EEPROM中读取控制舵机所需的PARA2和PARA3，手指移动第一阶段
void command_data_read_ratio_1(uchar* PARA2,uchar* PARA3)
{
    while(EECR & BIT(EEWE));//等待前面的“写”操作完成
	EEAR=0x0000;//写高字节地址
	EECR|=BIT(EERE);//读允许位置1
	*PARA2=EEDR;//读出EEDR中的数据

	while(EECR & BIT(EEWE));//等待前面的“写”操作完成
	EEAR=0x0001;//写高字节地址
	EECR|=BIT(EERE);//读允许位置1
	*PARA3=EEDR;//读出EEDR中的数据
}

//舵机控制指令数据读取函数，从EEPROM中读取控制舵机所需的PARA2和PARA3，手指移动第二阶段
void command_data_read_ratio_2(uchar* PARA2,uchar* PARA3)
{
    while(EECR & BIT(EEWE));//等待前面的“写”操作完成
	EEAR=0x0002;//写高字节地址
	EECR|=BIT(EERE);//读允许位置1
	*PARA2=EEDR;//读出EEDR中的数据

	while(EECR & BIT(EEWE));//等待前面的“写”操作完成
	EEAR=0x0003;//写高字节地址
	EECR|=BIT(EERE);//读允许位置1
	*PARA3=EEDR;//读出EEDR中的数据
}

//----------------【外部中断向量定义与外部中断处理函数】↓--------------------------------

//限位0（INT5）中断向量定义 //int5-cage1
#pragma interrupt_handler cage0_interrupt_handler:7

//限位0（INT5）中断处理函数
void cage0_interrupt_handler(void)
{
    delay(1000);
	if(~(PINE&(~BIT(5))))//PE5=0
	{
	    uart1_send_string((uchar*)no0stop,9);//0号舵机停止
		delay(50);
		uart0_send_string(" external interrupt 5 occurs ");
        cage0_state=1;//全局变量
	}
    
}

//限位1（INT6）中断向量定义 //int6-cage2
#pragma interrupt_handler cage1_interrupt_handler:8

//限位1（INT6）中断处理函数
void cage1_interrupt_handler(void)
{
    delay(100);
    if(~(PINE&(~BIT(6))))//PE6=0
	{
        uart1_send_string((uchar*)no1stop,9);//1号舵机停止
		delay(50);
    	uart0_send_string(" external interrupt 6 occurs ");
    	cage1_state=1;//全局变量	
	}
}


//---------------------------【主函数】↓-----------------------------------------------------------
void main(void)
{

 	//.....................[函数体内变量声明]...............................

 	uchar i;//清空指令存储变量时所用循环的计数变量
	
	uchar motor_command[9]={0xff,0xff,0x00,0x05,0x03,0x20,0x00,0x00,0x00};//
	uchar CHECK;
	//
	uchar cage_0=1;
	uchar cage_1=1;
	
	//调试模式手指移动速度，初始值为通过串口设定前的默认值
	uchar PARA2=0x10,PARA3=0x01;//保证低速，仅允许通过串口命令更改其值！
	
	//.......................[初始化配置].........................
	
    uart0_init(19200);//串口0（与上位机通信）初始化，波特率均为19200
    uart1_init(19200);//串口1（与舵机通信）初始化，波特率均为19200
	timer1_init();//定时计数器1初始化
	force_data_init();//应变片读取初始化
	
	
	//................[功能：上电后手指复位]....................................
	
	//两端限位的配置
	
    //PE5=INT5=限位0，带上拉电阻输入
    DDRE&=(~BIT(5));//意思是DDRE5=0，其余位不变。但注意不可按注释的方式写！
    PORTE|=BIT(5);//意思是PORTE5=1，其余位不变。但注意不可按注释的方式写！
	
    //PE6=INT6=限位1，带上拉电阻输入
    DDRE&=(~BIT(6));
    PORTE|=BIT(6);

    //INT5和INT6的外部中断寄存器配置
    //EICRB|=BIT(ISC51)|BIT(ISC61);//|BIT(ISC50)|BIT(ISC60);//中断触发方式：下降沿触发
    //EIMSK|=BIT(5)|BIT(6);//中断使能

    SREG |= 0X80;//打开全局中断
    
    //相关变量初始化
    cage0_state=0;
    cage1_state=0;

    //命令舵机停止转动
    uart1_send_string((uchar*)no0stop,9);
	delay(50);
	uart1_send_string((uchar*)no1stop,9);
    delay(50);
	
    //使手爪松开
    uart1_send_string((uchar*)no0release,9);
	delay(50);
    uart1_send_string((uchar*)no1release,9);

    //等待两端限位触发	
	while(cage_0|cage_1)
	{
	    if(cage_0)
		{
    	    if(!(PINE & BIT(5)))//PE5=0进入
	    	{
		        delay(50);
				if(!(PINE & BIT(5)))
				{
			        uart1_send_string((uchar*)no0stop,9);
					uart0_send_string(" interrupt 5 ");
					cage_0=0;
			    }
			
		    }
		}
		
	    if(cage_1)
		{
    	    if(!(PINE & BIT(6)))//PE6=0进入
	    	{
		        delay(50);
				if(!(PINE & BIT(6)))
				{
			        uart1_send_string((uchar*)no1stop,9);
					uart0_send_string(" interrupt 6 ");
					cage_1=0;
			    }
			
		    }
		}
	}
	
    uart0_send_string("Get ready! ");//向上位机报告准备就绪

    //恢复全局变量，方便以后使用
    cage0_state=0;
    cage1_state=0;
	
	UCSR0B|=(1<<RXEN0)|(1<<RXCIE0);   //UART0接收使能，接收中断使能
	
//........................[while(1)大循环]............................................
	
    while(1)
	{
	 	 if(uart0_instr_flag==1)
		 {
	         switch(gripper_mood)
		     {
	             case 0:
			     {
			         if(array_cmp(uart0_instr,"0100")==0)
				     {
				         uart0_send_string(" mood 0: enter 1-regular working mood! ");
					 	 gripper_mood=1;
				     }
				 
				 	 if(array_cmp(uart0_instr,"0200")==0)
				 	 {
				         uart0_send_string(" mood 0: enter 2-configuration mood! ");
					 	 gripper_mood=2;
						 //返回现存夹紧速度1
					 	 //返回现存夹紧速度2
					 	 //返回现存夹紧力阈值
				 	 }
				 
				 	 break;
			     }
			 
		         case 1:
			     {
			     	 if(array_cmp(uart0_instr,"1100")==0)
				 	 {
				         uart0_send_string(" mood 1: run! ");
					 	 uart1_send_string((uchar*)no1release,9);
				 	 }
				 
				 	 if(array_cmp(uart0_instr,"1200")==0)
				 	 {
				         uart0_send_string("mood 1: stop! ");
					 	 uart1_send_string((uchar*)no1stop,9);
				 	 }
				 
				 	 break;
			     }
			 
		         case 2:
			     {
					 if(array_cmp(uart0_instr,"2100")==0)//调试模式・手指0停止
				 	 {
					     uart1_send_string((uchar*)no0stop,9);
						 TIMSK&=(~BIT(2));//屏蔽定时计数1中断，停止向上返回夹持力值
				 	 }

					 if(array_cmp(uart0_instr,"2101")==0)//调试模式・手指0松开方向移动
				 	 {
					     motor_command[2]=0x00;//ID=0
						 motor_command[6]=PARA2;
						 motor_command[7]=PARA3;
						 CHECK=ratio_command_check(0,PARA2,PARA3);
						 motor_command[8]=CHECK;
						 delay(50);
						 uart1_send_string(motor_command,9);
						 delay(50);
						 uart0_send_string_with_num(motor_command,9);
						 TIMSK|=BIT(2);//打开定时计数1中断，向上返回夹持力值
				 	 }
					 
					 if(array_cmp(uart0_instr,"2102")==0)//调试模式・手指0夹紧方向移动
				 	 {
					     motor_command[2]=0x00;//ID=0
						 motor_command[6]=PARA2;
						 motor_command[7]=PARA3+0x04;//顺时针，绝对不可在此更改PARA3的值！
						 CHECK=ratio_command_check(0,PARA2,PARA3+0x04);
						 motor_command[8]=CHECK;
						 delay(50);
						 uart1_send_string(motor_command,9);
						 delay(50);
						 uart0_send_string_with_num(motor_command,9);
						 TIMSK|=BIT(2);//打开定时计数1中断，向上返回夹持力值
				 	 }

					 if(array_cmp(uart0_instr,"2110")==0)//调试模式・手指1停止
				 	 {
					     uart1_send_string((uchar*)no1stop,9);
						 TIMSK&=(~BIT(2));//屏蔽定时计数1中断，停止向上返回夹持力值
				 	 }

					 if(array_cmp(uart0_instr,"2111")==0)//调试模式・手指1松开方向移动
				 	 {
					     motor_command[2]=0x01;//ID=1
						 motor_command[6]=PARA2;
						 motor_command[7]=PARA3;
						 CHECK=ratio_command_check(1,PARA2,PARA3);
						 motor_command[8]=CHECK;
						 delay(50);
						 uart1_send_string(motor_command,9);
						 delay(50);
						 uart0_send_string_with_num(motor_command,9);
						 TIMSK|=BIT(2);//打开定时计数1中断，向上返回夹持力值
				 	 }
					 
					 if(array_cmp(uart0_instr,"2112")==0)//调试模式・手指1夹紧方向移动
				 	 {
					     motor_command[2]=0x01;//ID=1
						 motor_command[6]=PARA2;
						 motor_command[7]=PARA3+0x04;//顺时针，绝对不可在此更改PARA3的值！
						 CHECK=ratio_command_check(1,PARA2,PARA3+0x04);
						 motor_command[8]=CHECK;
						 delay(50);
						 uart1_send_string(motor_command,9);
						 delay(50);
						 uart0_send_string_with_num(motor_command,9);
						 TIMSK|=BIT(2);//打开定时计数1中断，向上返回夹持力值
				 	 }

					 if(array_cmp(Type(uart0_instr),"22")==0)
				 	 {
						 PARA2=uart0_instr[2];
						 PARA3=uart0_instr[3];
				 	 }
					 
					 
					 //0端(PE5)、1端(PE6)和空夹(PE7)查询判断
					 if(!(PINE & BIT(5)))
		 			 {
		     		     delay(50);
						 uart1_send_string((uchar*)no0stop,9);
						 delay(50);
			 			 uart0_send_string(" CAGE-0 ALERT ");
		 	 		 }
		 
		 			 if(!(PINE & BIT(6)))
		 			 {
			             delay(50);
						 uart1_send_string((uchar*)no1stop,9);
						 delay(50);
			 			 uart0_send_string(" CAGE-1 ALERT ");
					 }
		 
		 	 		 if(!(PINE & BIT(7)))
		 			 {
			 		     delay(50);
						 uart1_send_string((uchar*)no0stop,9);
						 delay(50);
						 uart1_send_string((uchar*)no1stop,9);
						 delay(50);
						 uart0_send_string(" EMPTY ALERT ");
		 			 }
					 
				     break;
			     }
			 
		         default:break;
			 }
			 
			 /*末尾应完成命令执行后的还原工作A-D*/
			 uart0_instr_flag=0; //A.命令接收标志位置0
			 uart0_r_instr_chk=0;//B.命令构造字符数计数置0
			 for(i=0;i<12;i++)//C.命令清除
			 {
		         uart0_instr[i]=0;
			 }
			 UCSR0B|=BIT(RXCIE0);//D.恢复UART0的接收中断			
	     }
		 
	}
}
